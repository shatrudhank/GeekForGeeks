
//https://practice.geeksforgeeks.org/problems/0-1-knapsack-problem0945/1#

import java.io.BufferedReader;
import java.io.Console;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;

public class Program {
   static BufferedReader  br=new BufferedReader(new InputStreamReader(System.in));
	public static void main(String args[] ) throws Exception {		
		 int t=Integer.parseInt( br.readLine());
		 while(t-->0)
		 {
			 int n=Integer.parseInt( br.readLine());
			 int w=Integer.parseInt( br.readLine());
			 int[] value=Arrays.stream(br.readLine().split(" ")).mapToInt(x->Integer.parseInt(x)).toArray();
			 int[] weight=Arrays.stream(br.readLine().split(" ")).mapToInt(x->Integer.parseInt(x)).toArray();
		 	System.out.println(knapSack(w, weight, value, n));
		
		 }
		
		
	}
	
	  static int knapSack(int w, int wt[], int val[], int n) 
	    { 
	       int[][] rs=new int[n+1][w+1];
	       for(int i=1;i<=n;i++)
	       {
	    	   for(int j=1;j<=w;j++)
	    	   {
	    	       if(j>=wt[i-1])
	    		   rs[i][j]=Math.max(rs[i-1][j],rs[i-1][j-wt[i-1]]+val[i-1]);
	    		   else
	    		    rs[i][j]= rs[i-1][j];
	    		   
	    	   }
	       }
	       
	       return rs[n][w];	    } 
	
}
