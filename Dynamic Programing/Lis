//https://practice.geeksforgeeks.org/problems/longest-increasing-subsequence-1587115620/1

import java.io.BufferedReader;
import java.io.Console;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;

public class Program {
   static BufferedReader  br=new BufferedReader(new InputStreamReader(System.in));
	public static void main(String args[] ) throws Exception {		
		 int t=Integer.parseInt( br.readLine());
		 while(t-->0)
		 {
			 int n=Integer.parseInt( br.readLine());
			int[] arr=Arrays.stream(br.readLine().split(" ")).mapToInt(Integer::parseInt).toArray();
		 	 System.out.println(longestSubsequence(n,arr));
		
		 }
		
		
	}
	 static int longestSubsequence(int size, int a[]){
	       List<Integer> rs=new ArrayList<>();
	       int pos=0;
	       rs.add(a[0]);
	       for(int i=1;i<size;i++)
	       {
	    	   if(rs.get(pos)<a[i])
	    	   {
	    		   rs.add(a[i]);
	    		   pos++;
	    	   }
	    	   else
	    	   {
	    		   int idx=Arrays.binarySearch(rs.toArray(), a[i]);
	    		   if(idx<0)
	    		   {
	    			   idx=-1*idx-1;
	    			   rs.set(1+ (idx),a[i]);
	    		   }
	    	   }
	       }
	       return pos+1;
	    }
}
